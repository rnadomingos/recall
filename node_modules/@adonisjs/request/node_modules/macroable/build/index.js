'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
class Macroable {
    static macro(name, callback) {
        this._macros[name] = callback;
        this.prototype[name] = callback;
    }
    static getMacro(name) {
        return this._macros[name];
    }
    static hasMacro(name) {
        return !!this.getMacro(name);
    }
    static getter(name, callback, singleton = false) {
        const wrappedCallback = singleton ? function wrappedCallback() {
            const propName = `_${name}_`;
            this[propName] = this[propName] || callback.bind(this)();
            return this[propName];
        } : callback;
        this._getters[name] = wrappedCallback;
        Object.defineProperty(this.prototype, name, {
            get: wrappedCallback,
            configurable: true,
            enumerable: true,
        });
    }
    static getGetter(name) {
        return this._getters[name];
    }
    static hasGetter(name) {
        return !!this.getGetter(name);
    }
    static hydrate() {
        Object.keys(this._macros).forEach((key) => Reflect.deleteProperty(this.prototype, key));
        Object.keys(this._getters).forEach((key) => Reflect.deleteProperty(this.prototype, key));
        this._macros = {};
        this._getters = {};
    }
}
Macroable._macros = {};
Macroable._getters = {};
exports.Macroable = Macroable;
