/// <reference types="node" />
import { UrlWithStringQuery } from 'url';
import { ServerResponse, IncomingMessage, IncomingHttpHeaders } from 'http';
import { Macroable } from 'macroable';
import { RequestContract, RequestConfig } from './RequestContract';
export declare class Request extends Macroable implements RequestContract {
    request: IncomingMessage;
    response: ServerResponse;
    private _config;
    private _secret?;
    parsedUrl: UrlWithStringQuery;
    private _body;
    private _all;
    private _original;
    private _qs;
    private _raw;
    private _lazyAccepts;
    private _parsedCookies;
    protected static _macros: {};
    protected static _getters: {};
    constructor(request: IncomingMessage, response: ServerResponse, _config: RequestConfig, _secret?: string | undefined);
    private _parseQueryString;
    private _parseCookies;
    private _initiateAccepts;
    id(): string;
    setInitialBody(body: any): void;
    updateBody(body: any): void;
    updateRawBody(rawBody: string): void;
    updateQs(data: any): void;
    get(): {
        [key: string]: any;
    };
    post(): {
        [key: string]: any;
    };
    all(): {
        [key: string]: any;
    };
    original(): {
        [key: string]: any;
    };
    raw(): string | null;
    input(key: string, defaultValue?: any): any;
    except(keys: string[]): {
        [key: string]: any;
    };
    only<T extends string, U = {
        [K in T]: any;
    }>(keys: T[]): U;
    intended(): string;
    method(): string;
    headers(): IncomingHttpHeaders;
    header(key: string, defaultValue?: any): string | undefined;
    ip(): string;
    ips(): string[];
    protocol(): string;
    secure(): boolean;
    hostname(): string | null;
    subdomains(): string[];
    ajax(): boolean;
    pjax(): boolean;
    url(includeQueryString?: boolean): string;
    completeUrl(includeQueryString?: boolean): string;
    is(types: string[]): string | null;
    accepts(types: string[]): string | null;
    types(): string[];
    language(languages: string[]): string | null;
    languages(): string[];
    charset(charsets: string[]): string | null;
    charsets(): string[];
    encoding(encodings: string[]): string | null;
    encodings(): string[];
    hasBody(): boolean;
    fresh(): boolean;
    stale(): boolean;
    cookies(): {
        [key: string]: any;
    };
    cookie(key: string, defaultValue?: string): any;
    plainCookies(): {
        [key: string]: any;
    };
    plainCookie(key: string, defaultValue?: string): any;
}
