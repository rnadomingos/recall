"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cookie = require("cookie");
const cookieSignature = require("cookie-signature");
function pack(value, secretKey) {
    if (value === undefined || value === null) {
        return null;
    }
    if (value instanceof Date) {
        value = value.toJSON();
    }
    else if (typeof (value) !== 'string') {
        value = `j:${JSON.stringify(value)}`;
    }
    if (secretKey) {
        return `s:${cookieSignature.sign(value, secretKey)}`;
    }
    return value;
}
exports.pack = pack;
function unpack(value, secretKey) {
    let signed = false;
    if (value.substr(0, 2) === 's:' && secretKey) {
        signed = true;
        value = cookieSignature.unsign(value.slice(2), secretKey);
    }
    if (!value) {
        return null;
    }
    if (value.substr(0, 2) === 'j:') {
        try {
            return {
                value: JSON.parse(value.slice(2)),
                signed,
            };
        }
        catch (error) {
            return null;
        }
    }
    return { value, signed };
}
exports.unpack = unpack;
function parse(cookieHeader, secretKey) {
    const output = { signedCookies: {}, plainCookies: {} };
    if (!cookieHeader) {
        return output;
    }
    const parsed = cookie.parse(cookieHeader);
    return Object.keys(parsed).reduce((result, key) => {
        const unpacked = unpack(parsed[key], secretKey);
        if (unpacked === null) {
            return result;
        }
        if (unpacked.signed) {
            result.signedCookies[key] = unpacked.value;
        }
        else {
            result.plainCookies[key] = unpacked.value;
        }
        return result;
    }, output);
}
exports.parse = parse;
function serialize(key, value, secretKey, options) {
    const packedValue = pack(value, secretKey);
    if (packedValue === null) {
        return null;
    }
    return cookie.serialize(key, packedValue, options);
}
exports.serialize = serialize;
